import tkinter as tk
from tkinter import ttk, messagebox
import bisect

gas_data = {
    "Oxygen": {
        "temps": [
            0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200,
            1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300,
            2400, 2500
        ],
        "values": [[29.274, 20.959, 29.274, 20.959, 0.915, 0.6548],
                   [29.877, 21.562, 29.538, 21.223, 0.923, 0.6632],
                   [30.815, 22.500, 29.932, 21.617, 0.935, 0.6753],
                   [31.833, 23.518, 30.401, 22.086, 0.950, 0.6900],
                   [32.758, 24.443, 30.878, 22.563, 0.965, 0.7051],
                   [33.549, 25.234, 31.334, 23.019, 0.979, 0.7193],
                   [34.202, 25.887, 31.761, 23.446, 0.993, 0.7327],
                   [34.747, 26.432, 32.151, 23.836, 1.005, 0.7448],
                   [35.203, 26.888, 32.503, 24.187, 1.016, 0.7557],
                   [35.584, 27.269, 32.825, 24.510, 1.026, 0.7658],
                   [35.915, 27.600, 33.118, 24.803, 1.035, 0.7750],
                   [36.216, 27.901, 33.386, 25.071, 1.043, 0.7833],
                   [36.488, 28.173, 33.633, 25.318, 1.051, 0.7913],
                   [36.752, 28.437, 33.863, 25.548, 1.058, 0.7984],
                   [36.999, 28.684, 34.077, 25.762, 1.065, 0.8051],
                   [37.242, 28.927, 34.282, 25.967, 1.071, 0.8114],
                   [37.481, 29.166, 34.475, 26.159, 1.077, 0.8173],
                   [37.715, 29.400, 34.659, 26.344, 1.083, 0.8231],
                   [37.945, 29.630, 34.834, 26.520, 1.089, 0.8286],
                   [38.176, 29.861, 35.006, 26.691, 1.094, 0.8340],
                   [38.406, 30.091, 35.170, 26.854, 1.099, 0.8390],
                   [38.636, 30.321, 35.329, 27.014, 1.104, 0.8441],
                   [38.858, 30.543, 35.484, 27.168, 1.109, 0.8491],
                   [39.080, 30.765, 35.634, 27.319, 1.114, 0.8537],
                   [39.294, 30.979, 35.785, 27.470, 1.118, 0.8583],
                   [39.503, 31.188, 35.927, 27.612, 1.123, 0.8629]]
    },
    "Nitrogen": {
        "temps": [
            0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200,
            1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300,
            2400, 2500
        ],
        "values": [[29.115, 20.800, 29.115, 20.800, 1.039, 0.7423],
                   [29.199, 20.884, 29.145, 20.830, 1.040, 0.7436],
                   [29.471, 21.156, 29.228, 20.913, 1.043, 0.7465],
                   [29.953, 21.638, 29.383, 21.068, 1.049, 0.7520],
                   [30.577, 22.261, 29.601, 21.286, 1.057, 0.7699],
                   [31.251, 22.936, 29.865, 21.550, 1.066, 0.7691],
                   [31.921, 23.605, 30.150, 21.834, 1.076, 0.7792],
                   [32.540, 24.225, 30.451, 22.136, 1.087, 0.7901],
                   [33.101, 24.711, 30.748, 22.433, 1.097, 0.8005],
                   [33.599, 25.284, 31.037, 22.722, 1.108, 0.8110],
                   [34.039, 25.724, 31.313, 22.998, 1.118, 0.8210],
                   [34.424, 26.109, 31.577, 23.262, 1.127, 0.8303],
                   [34.763, 26.448, 31.828, 23.513, 1.136, 0.8395],
                   [35.061, 26.746, 32.067, 23.752, 1.145, 0.8478],
                   [35.320, 27.005, 32.293, 23.978, 1.153, 0.8558],
                   [35.546, 27.231, 32.503, 24.187, 1.160, 0.8633],
                   [35.747, 27.432, 32.699, 24.384, 1.167, 0.8704],
                   [35.927, 27.612, 32.884, 24.568, 1.174, 0.8771],
                   [36.091, 27.776, 33.055, 24.740, 1.180, 0.8830],
                   [36.237, 27.922, 33.218, 24.903, 1.186, 0.8889],
                   [36.367, 28.052, 33.373, 25.058, 1.191, 0.8943],
                   [36.484, 28.169, 33.520, 25.205, 1.197, 0.8998],
                   [36.593, 28.278, 33.658, 25.343, 1.201, 0.9048],
                   [36.694, 28.378, 33.788, 25.473, 1.206, 0.9094],
                   [36.786, 28.471, 33.909, 25.594, 1.210, 0.9136],
                   [36.869, 28.554, 34.022, 25.707, 1.214, 0.9178]]
    },
    "Carbon Dioxide": {
        "temps": [
            0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200,
            1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300,
            2400, 2500
        ],
        "values": [[35.860, 27.545, 35.860, 27.545, 0.815, 0.6259],
                   [40.206, 31.891, 38.113, 29.798, 0.866, 0.6770],
                   [43.690, 35.375, 40.060, 31.745, 0.910, 0.7214],
                   [46.516, 38.201, 41.755, 33.440, 0.949, 0.7599],
                   [48.861, 40.545, 43.250, 34.935, 0.983, 0.7938],
                   [50.816, 42.501, 44.573, 36.258, 1.013, 0.8240],
                   [52.453, 44.138, 45.754, 37.439, 1.040, 0.8508],
                   [53.826, 45.511, 46.813, 38.498, 1.064, 0.8746],
                   [54.978, 46.662, 47.764, 39.449, 1.085, 0.8964],
                   [55.953, 47.638, 48.618, 40.303, 1.104, 0.9157],
                   [56.774, 48.459, 49.392, 41.077, 1.122, 0.9332],
                   [57.473, 49.158, 50.100, 41.785, 1.138, 0.9496],
                   [58.072, 49.757, 50.740, 42.425, 1.153, 0.9638],
                   [58.587, 50.272, 51.322, 43.007, 1.166, 0.9772],
                   [59.030, 50.715, 51.858, 43.543, 1.178, 0.9894],
                   [59.411, 51.096, 52.348, 44.033, 1.189, 1.0010],
                   [59.738, 51.423, 52.800, 44.485, 1.200, 1.0110],
                   [60.023, 51.708, 53.219, 44.904, 1.209, 1.0200],
                   [60.270, 51.955, 53.604, 45.289, 1.218, 1.0290],
                   [60.479, 52.164, 53.960, 45.645, 1.226, 1.0370],
                   [60.655, 52.340, 54.291, 45.976, 1.233, 1.0450],
                   [60.801, 52.486, 54.597, 46.281, 1.241, 1.0520],
                   [60.919, 52.604, 54.881, 46.566, 1.247, 1.0580],
                   [61.007, 52.692, 55.145, 46.830, 1.253, 1.0640],
                   [61.061, 52.746, 55.392, 47.077, 1.259, 1.0700],
                   [61.086, 52.771, 55.618, 47.303, 1.264, 1.0750]]
    },
    "Carbon Monoxide": {
        "temps": [
            0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200,
            1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300,
            2400, 2500
        ],
        "values": [[29.124, 20.809, 29.124, 20.809, 1.040, 0.7427],
                   [29.262, 20.947, 29.178, 20.863, 1.042, 0.7448],
                   [29.647, 21.332, 29.304, 20.989, 1.046, 0.7494],
                   [30.254, 21.939, 29.517, 21.202, 1.054, 0.7570],
                   [30.974, 22.659, 29.789, 21.474, 1.063, 0.7666],
                   [31.707, 23.392, 30.099, 21.784, 1.075, 0.7750],
                   [32.402, 24.087, 30.426, 22.111, 1.086, 0.7892],
                   [33.026, 24.711, 30.752, 22.437, 1.098, 0.8009],
                   [33.574, 25.259, 31.071, 22.756, 1.109, 0.8122],
                   [34.056, 25.741, 31.376, 23.061, 1.120, 0.8231],
                   [34.470, 26.155, 31.665, 23.350, 1.130, 0.8336],
                   [34.826, 26.511, 31.937, 23.622, 1.140, 0.8432],
                   [35.140, 26.825, 32.193, 23.878, 1.149, 0.8566],
                   [35.412, 27.097, 32.427, 24.112, 1.158, 0.8608],
                   [35.647, 27.332, 32.653, 24.338, 1.166, 0.8688],
                   [35.856, 27.541, 32.858, 24.543, 1.173, 0.8763],
                   [36.040, 27.725, 33.051, 24.736, 1.180, 0.8830],
                   [36.204, 27.889, 33.231, 24.916, 1.187, 0.8893],
                   [36.350, 28.035, 33.403, 25.088, 1.192, 0.8956],
                   [36.480, 28.165, 33.562, 25.247, 1.198, 0.9014],
                   [36.597, 28.282, 33.708, 25.351, 1.203, 0.9064],
                   [36.706, 28.391, 33.851, 25.536, 1.208, 0.9115],
                   [36.802, 28.487, 33.980, 25.665, 1.213, 0.9161],
                   [36.895, 28.579, 34.106, 25.791, 1.218, 0.9207],
                   [36.978, 28.663, 34.223, 25.908, 1.222, 0.9249],
                   [37.054, 28.739, 34.336, 26.201, 1.226, 0.9291]]
    },
    "Hydrogen": {
        "temps": [
            0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200,
            1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300,
            2400, 2500
        ],
        "values": [[28.617, 20.302, 28.617, 20.302, 14.195, 10.071],
                   [29.128, 20.813, 28.935, 20.620, 14.353, 10.228],
                   [29.241, 20.926, 29.073, 20.758, 14.421, 10.297],
                   [29.300, 20.984, 29.124, 20.809, 14.446, 10.322],
                   [29.396, 21.081, 29.187, 20.871, 14.477, 10.353],
                   [29.559, 21.244, 29.249, 20.934, 14.509, 10.384],
                   [29.794, 21.479, 29.316, 21.001, 14.542, 10.417],
                   [30.099, 21.784, 29.408, 21.093, 14.587, 10.463],
                   [30.472, 22.157, 29.517, 21.202, 14.641, 10.517],
                   [30.870, 22.555, 29.647, 21.332, 14.706, 10.581],
                   [31.284, 22.969, 29.789, 21.474, 14.777, 10.652],
                   [31.724, 23.409, 29.944, 21.629, 14.853, 10.729],
                   [32.155, 23.840, 30.108, 21.793, 14.934, 10.810],
                   [32.590, 24.275, 30.288, 21.973, 15.024, 10.899],
                   [33.001, 24.686, 30.468, 22.153, 15.113, 10.988],
                   [33.394, 25.079, 30.648, 22.333, 15.202, 11.078],
                   [33.763, 25.448, 30.832, 22.517, 15.294, 11.169],
                   [34.114, 25.799, 31.012, 22.697, 15.383, 11.258],
                   [34.445, 26.130, 31.192, 22.877, 15.472, 11.348],
                   [34.763, 26.448, 31.372, 23.057, 15.562, 11.437],
                   [35.056, 26.741, 31.548, 23.233, 15.649, 11.524],
                   [35.333, 27.018, 31.724, 23.409, 15.736, 11.611],
                   [35.605, 27.290, 31.891, 23.576, 15.819, 11.694],
                   [35.852, 27.537, 32.059, 23.744, 15.902, 11.799],
                   [36.091, 27.776, 32.222, 23.907, 15.983, 11.858],
                   [36.317, 28.002, 32.385, 24.070, 16.064, 11.940]]
    },
    "Air": {
        "temps": [
            0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200,
            1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300,
            2400, 2500
        ],
        "values": [[29.073, 20.758, 29.073, 20.758, 1.004, 0.7164],
                   [29.256, 20.951, 29.153, 20.838, 1.006, 0.7193],
                   [29.676, 21.361, 29.300, 20.984, 1.012, 0.7243],
                   [30.267, 21.952, 29.521, 21.206, 1.019, 0.7319],
                   [30.949, 22.634, 29.789, 21.474, 1.028, 0.7415],
                   [31.640, 23.325, 30.095, 21.780, 1.039, 0.7520],
                   [32.302, 23.986, 30.405, 22.090, 1.050, 0.7624],
                   [32.900, 24.585, 30.723, 22.408, 1.061, 0.7733],
                   [33.432, 25.117, 31.029, 22.714, 1.071, 0.7842],
                   [33.905, 25.590, 31.322, 23.007, 1.081, 0.7942],
                   [34.315, 26.000, 31.598, 23.283, 1.091, 0.8039],
                   [34.680, 26.365, 31.862, 23.547, 1.100, 0.8127],
                   [35.002, 26.687, 32.109, 23.794, 1.108, 0.8215],
                   [35.291, 26.976, 32.343, 24.028, 1.117, 0.8294],
                   [35.546, 27.231, 32.565, 24.250, 1.124, 0.8370],
                   [35.772, 27.457, 32.775, 24.460, 1.131, 0.8441],
                   [35.978, 27.663, 32.967, 24.652, 1.138, 0.8508],
                   [36.170, 27.855, 33.151, 24.836, 1.144, 0.8570],
                   [36.346, 28.031, 33.319, 25.004, 1.150, 0.8633],
                   [36.509, 28.194, 33.482, 25.167, 1.156, 0.8688],
                   [36.656, 28.341, 33.641, 25.326, 1.161, 0.8742],
                   [36.798, 28.483, 33.788, 25.473, 1.166, 0.8792],
                   [36.928, 28.613, 33.926, 25.611, 1.171, 0.8843],
                   [37.054, 28.739, 34.060, 25.745, 1.176, 0.8889],
                   [37.171, 28.856, 34.186, 25.871, 1.180, 0.8931],
                   [37.280, 28.965, 34.307, 25.992, 1.184, 0.8972]]
    }
}


def interpolate(temp, temps, values):
    if temp < temps[0] or temp > temps[-1]:
        raise ValueError(
            f"Temperature out of range ({temps[0]}°C - {temps[-1]}°C)")

    pos = bisect.bisect_left(temps, temp)

    if pos == 0:
        return values[0], (temps[0], temps[0]), (values[0], values[0])
    if pos == len(temps):
        return values[-1], (temps[-1], temps[-1]), (values[-1], values[-1])

    lower_temp = temps[pos - 1]
    upper_temp = temps[pos]
    lower_vals = values[pos - 1]
    upper_vals = values[pos]

    ratio = (temp - lower_temp) / (upper_temp - lower_temp)
    interpolated = [
        l + ratio * (u - l) for l, u in zip(lower_vals, upper_vals)
    ]

    return interpolated, (lower_temp, upper_temp), (lower_vals, upper_vals)


def main():
    print("Thermodynamic Properties Calculator\n")

    while True:
        try:
            gases = list(gas_data.keys())
            print("Available gases:")
            for i, gas in enumerate(gases, 1):
                print(f"{i}. {gas}")

            gas_idx = int(input("\nSelect gas (number): ")) - 1
            selected_gas = gases[gas_idx]
            data = gas_data[selected_gas]

            temp = float(input("Enter temperature in °C (0-2500): "))

            result, temp_points, val_points = interpolate(
                temp, data["temps"], data["values"])

            print("\n" + "=" * 50)
            print(f"Results for {selected_gas} at {temp}°C:")
            print(f"Molecular heat cp [P1]: {result[0]:.3f} kJ/kmolK")
            print(f"Molecular heat cv [P2]: {result[1]:.3f} kJ/kmolK")
            print(f"Average molecular heat cp [P3]: {result[2]:.3f} kJ/kmolK")
            print(f"Average molecular heat cv [P4]: {result[3]:.3f} kJ/kmolK")
            print(f"Specific heat cp [P5]: {result[4]:.3f} kJ/kgK")
            print(f"Specific heat cv [P6]: {result[5]:.3f} kJ/kgK")

            print("\nCalculation Steps:")
            x = temp
            x0 = temp_points[0]
            x1 = temp_points[1]
            y0 = val_points[0]
            y1 = val_points[1]
            for i in range(6):
                print(f"\nProperty {i+1}:")
                print(f"y₀ = {y0[i]:.3f}, y₁ = {y1[i]:.3f}")
                print(
                    f"y = {y0[i]:.3f} + ({x} - {x0:.3f}) * ({y1[i]:.3f} - {y0[i]:.3f})/({x1:.3f} - {x0:.3f})"
                )
                print(f"y ≈ {result[i]:.3f}")

            repeat = input("\nCalculate another? (y/n): ").lower()
            if repeat != 'y':
                print(
                    "\nGood luck with the rest of it sucker!"
                )
                break

        except (ValueError, IndexError) as e:
            print(f"\n⚠️ Error: {e}\nPlease try again.\n")
        except KeyboardInterrupt:
            print("\n\nOperation cancelled by user")
            break


if __name__ == "__main__":
    main()
